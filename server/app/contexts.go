// Code generated by goagen v1.1.0, command line:
// $ goagen
// --design=github.com/ihcsim/bluelens/design
// --out=$(GOPATH)/src/github.com/ihcsim/bluelens/server
// --version=v1.1.0
//
// API "bluelens": Application Contexts
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"golang.org/x/net/context"
	"strconv"
)

// RecommendRecommendationsContext provides the recommendations recommend action context.
type RecommendRecommendationsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	MaxCount int
	UserID   string
}

// NewRecommendRecommendationsContext parses the incoming request URL and body, performs validations and creates the
// context used by the recommendations controller recommend action.
func NewRecommendRecommendationsContext(ctx context.Context, service *goa.Service) (*RecommendRecommendationsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := RecommendRecommendationsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramMaxCount := req.Params["maxCount"]
	if len(paramMaxCount) > 0 {
		rawMaxCount := paramMaxCount[0]
		if maxCount, err2 := strconv.Atoi(rawMaxCount); err2 == nil {
			rctx.MaxCount = maxCount
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("maxCount", rawMaxCount, "integer"))
		}
	}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = rawUserID
	}
	return &rctx, err
}

// OKAll sends a HTTP response with status code 200.
func (ctx *RecommendRecommendationsContext) OKAll(r *BluelensRecommendationsAll) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OK sends a HTTP response with status code 200.
func (ctx *RecommendRecommendationsContext) OK(r *BluelensRecommendations) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// FollowUserContext provides the user follow action context.
type FollowUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	FolloweeID string
	FollowerID int
}

// NewFollowUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller follow action.
func NewFollowUserContext(ctx context.Context, service *goa.Service) (*FollowUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := FollowUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramFolloweeID := req.Params["followeeID"]
	if len(paramFolloweeID) > 0 {
		rawFolloweeID := paramFolloweeID[0]
		rctx.FolloweeID = rawFolloweeID
	}
	paramFollowerID := req.Params["followerID"]
	if len(paramFollowerID) > 0 {
		rawFollowerID := paramFollowerID[0]
		if followerID, err2 := strconv.Atoi(rawFollowerID); err2 == nil {
			rctx.FollowerID = followerID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("followerID", rawFollowerID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *FollowUserContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *FollowUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ListenUserContext provides the user listen action context.
type ListenUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	MusicID int
	UserID  string
}

// NewListenUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller listen action.
func NewListenUserContext(ctx context.Context, service *goa.Service) (*ListenUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ListenUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramMusicID := req.Params["musicID"]
	if len(paramMusicID) > 0 {
		rawMusicID := paramMusicID[0]
		if musicID, err2 := strconv.Atoi(rawMusicID); err2 == nil {
			rctx.MusicID = musicID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("musicID", rawMusicID, "integer"))
		}
	}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = rawUserID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListenUserContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListenUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}
